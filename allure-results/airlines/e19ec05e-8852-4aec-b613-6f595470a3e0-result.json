{"name": "test_discover[input_question=which was the Best Airline for American Travelers? and Type=unstructured]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00007FF624D8EEA2+31554]\n\t(No symbol) [0x00007FF624D07ED9]\n\t(No symbol) [0x00007FF624BC872A]\n\t(No symbol) [0x00007FF624BAFA9C]\n\t(No symbol) [0x00007FF624BAF960]\n\t(No symbol) [0x00007FF624BCAD51]\n\t(No symbol) [0x00007FF624C5C079]\n\t(No symbol) [0x00007FF624C3CDD3]\n\t(No symbol) [0x00007FF624C0A33B]\n\t(No symbol) [0x00007FF624C0AED1]\n\tGetHandleVerifier [0x00007FF625098B1D+3217341]\n\tGetHandleVerifier [0x00007FF6250E5AE3+3532675]\n\tGetHandleVerifier [0x00007FF6250DB0E0+3489152]\n\tGetHandleVerifier [0x00007FF624E3E776+750614]\n\t(No symbol) [0x00007FF624D1375F]\n\t(No symbol) [0x00007FF624D0EB14]\n\t(No symbol) [0x00007FF624D0ECA2]\n\t(No symbol) [0x00007FF624CFE16F]\n\tBaseThreadInitThunk [0x00007FFA8940257D+29]\n\tRtlUserThreadStart [0x00007FFA8AA2AF28+40]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a3ef8132cd7eac41bb51568c38b90e5b\")>\ndata = {'input_question': 'which was the Best Airline for American Travelers?', 'type': 'unstructured'}\n\n    @pytest.mark.parametrize(\"data\", load_test_data(), ids=generate_test_id)\n    @retry_on_failure(retries=2, wait_time=7)\n    def test_discover(driver, data):\n        input_questions = data['input_question']\n        question_type = data['type']\n        expected_answer = data.get('expected_answer')  # Get expected_answer if it exists\n    \n        time.sleep(3)\n>       click_element(driver, Page_Locators.NEW_SESSION_BUTTON)\n\ntestcases\\test_discover.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutilities\\utils.py:34: in click_element\n    element = WebDriverWait(driver, timeout).until(EC.element_to_be_clickable(locator))\n..\\..\\..\\PycharmProjects\\API_Testing_Practise\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\..\\PycharmProjects\\API_Testing_Practise\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n..\\..\\..\\PycharmProjects\\API_Testing_Practise\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\PycharmProjects\\API_Testing_Practise\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D633205C10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...07FF624CFE16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA8940257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA8AA2AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF624D8EEA2+31554]\nE       \t(No symbol) [0x00007FF624D07ED9]\nE       \t(No symbol) [0x00007FF624BC872A]\nE       \t(No symbol) [0x00007FF624BAFA9C]\nE       \t(No symbol) [0x00007FF624BAF960]\nE       \t(No symbol) [0x00007FF624BCAD51]\nE       \t(No symbol) [0x00007FF624C5C079]\nE       \t(No symbol) [0x00007FF624C3CDD3]\nE       \t(No symbol) [0x00007FF624C0A33B]\nE       \t(No symbol) [0x00007FF624C0AED1]\nE       \tGetHandleVerifier [0x00007FF625098B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF6250E5AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF6250DB0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF624E3E776+750614]\nE       \t(No symbol) [0x00007FF624D1375F]\nE       \t(No symbol) [0x00007FF624D0EB14]\nE       \t(No symbol) [0x00007FF624D0ECA2]\nE       \t(No symbol) [0x00007FF624CFE16F]\nE       \tBaseThreadInitThunk [0x00007FFA8940257D+29]\nE       \tRtlUserThreadStart [0x00007FFA8AA2AF28+40]\n\n..\\..\\..\\PycharmProjects\\API_Testing_Practise\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "log", "source": "c1124921-8f95-45fe-b896-685f719af25f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'input_question': 'which was the Best Airline for American Travelers?', 'type': 'unstructured'}"}], "start": 1720080708529, "stop": 1720081112311, "uuid": "18e5f394-d91b-4a2a-951f-2a7be5b07e66", "historyId": "89135d87123b0a9360104039a637d3f9", "testCaseId": "2736d3b0ad48a98575ee7d13973c5285", "fullName": "testcases.test_discover#test_discover", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_discover"}, {"name": "host", "value": "LAPTOP-58GTJBDF"}, {"name": "thread", "value": "6156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_discover"}]}