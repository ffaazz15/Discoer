{"name": "test_discover[input_question=Hi and Type=unstructured]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x00007FF624D8EEA2+31554]\n\t(No symbol) [0x00007FF624D07ED9]\n\t(No symbol) [0x00007FF624BC872A]\n\t(No symbol) [0x00007FF624C18434]\n\t(No symbol) [0x00007FF624C1853C]\n\t(No symbol) [0x00007FF624C5F6A7]\n\t(No symbol) [0x00007FF624C3D06F]\n\t(No symbol) [0x00007FF624C5C977]\n\t(No symbol) [0x00007FF624C3CDD3]\n\t(No symbol) [0x00007FF624C0A33B]\n\t(No symbol) [0x00007FF624C0AED1]\n\tGetHandleVerifier [0x00007FF625098B1D+3217341]\n\tGetHandleVerifier [0x00007FF6250E5AE3+3532675]\n\tGetHandleVerifier [0x00007FF6250DB0E0+3489152]\n\tGetHandleVerifier [0x00007FF624E3E776+750614]\n\t(No symbol) [0x00007FF624D1375F]\n\t(No symbol) [0x00007FF624D0EB14]\n\t(No symbol) [0x00007FF624D0ECA2]\n\t(No symbol) [0x00007FF624CFE16F]\n\tBaseThreadInitThunk [0x00007FFA8940257D+29]\n\tRtlUserThreadStart [0x00007FFA8AA2AF28+40]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7ffc35128b851e0c3885aedb2b8dbbca\")>, data = {'input_question': 'Hi', 'type': 'unstructured'}\n\n    @pytest.mark.parametrize(\"data\", load_test_data(), ids=generate_test_id)\n    @retry_on_failure(retries=2, wait_time=7)\n    def test_discover(driver, data):\n        input_questions = data['input_question']\n        question_type = data['type']\n        expected_answer = data.get('expected_answer')  # Get expected_answer if it exists\n    \n        time.sleep(3)\n        click_element(driver, Page_Locators.NEW_SESSION_BUTTON)\n        time.sleep(4)\n        text_box = wait_for_element(driver, Page_Locators.TEXT_BOX)\n        logging.info(f\"Incoming question (Type: {question_type}): {input_questions}\")\n        text_box.send_keys(input_questions)\n        text_box.send_keys(Keys.ENTER)\n        time.sleep(5)\n        try:\n            if question_type == 'structured':\n                WebDriverWait(driver, 40).until(EC.visibility_of_element_located((By.XPATH, \"//ul[@class='nav nav-tabs']\")))\n                time.sleep(3)\n                wait_for_element(driver, Page_Locators.CHART_BUTTON)\n                time.sleep(3)\n                click_element(driver, Page_Locators.SOURCE_BUTTON)\n                time.sleep(1)\n                current_answer = get_element_text(driver, Page_Locators.SQL_DISCOVER_ANSWER)\n                print(f\"Answer: '{current_answer}'\")\n                logging.critical(f\"Answer: {current_answer}\")\n                answer = current_answer.replace('\\n', ' ')\n                assert expected_answer in answer, f\"Expected '{expected_answer}' but got '{current_answer}'\"\n            else:\n                WebDriverWait(driver, 40).until(EC.visibility_of_element_located((By.XPATH, \"//ul[@class='nav nav-tabs']\")))\n                current_answer = get_element_text(driver, Page_Locators.DISCOVER_ANSWER)\n                print(f\"Answer: '{current_answer}'\")\n                logging.critical(f\"Answer: {current_answer}\")\n                time.sleep(3)\n                assert current_answer.lower() != \"i don't know.\", f\"Expected a non-'I don't know' answer for question, but received '{current_answer}'\"\n                assert len(current_answer) > 15, f\"Answer for '{input_questions}' is less than 15 characters\"\n    \n                if input_questions != \"Hi\":\n                    WebDriverWait(driver, 40).until(EC.visibility_of_element_located((By.XPATH, \"//ul[@class='nav nav-tabs']\")))\n                    click_element(driver, Page_Locators.SOURCE_BUTTON)\n                    time.sleep(4)\n                    click_element(driver, Page_Locators.DOCUMENTS_BUTTON)\n                    driver.switch_to.window(driver.window_handles[1])\n                    time.sleep(4)\n                    assert \".pdf\" in driver.current_url, \"The URL does not contain a PDF file\"\n                    # time.sleep(3)\n                    # pdf_content = wait_for_element(driver, Page_Locators.PDF_CONTENT)\n                    # assert pdf_content is not None, \"PDF did not open successfully\"\n                    time.sleep(4)\n                    driver.close()\n                    driver.switch_to.window(driver.window_handles[0])\n                    time.sleep(3)\n    \n        except Exception as e:\n            logging.error(f\"Error occurred for question: '{input_questions}': {str(e)}\")\n>           raise e\n\ntestcases\\test_discover.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestcases\\test_discover.py:56: in test_discover\n    WebDriverWait(driver, 40).until(EC.visibility_of_element_located((By.XPATH, \"//ul[@class='nav nav-tabs']\")))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7ffc35128b851e0c3885aedb2b8dbbca\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000019E18B425C0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF624D8EEA2+31554]\nE       \t(No symbol) [0x00007FF624D07ED9]\nE       \t(No symbol) [0x00007FF624BC872A]\nE       \t(No symbol) [0x00007FF624C18434]\nE       \t(No symbol) [0x00007FF624C1853C]\nE       \t(No symbol) [0x00007FF624C5F6A7]\nE       \t(No symbol) [0x00007FF624C3D06F]\nE       \t(No symbol) [0x00007FF624C5C977]\nE       \t(No symbol) [0x00007FF624C3CDD3]\nE       \t(No symbol) [0x00007FF624C0A33B]\nE       \t(No symbol) [0x00007FF624C0AED1]\nE       \tGetHandleVerifier [0x00007FF625098B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF6250E5AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF6250DB0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF624E3E776+750614]\nE       \t(No symbol) [0x00007FF624D1375F]\nE       \t(No symbol) [0x00007FF624D0EB14]\nE       \t(No symbol) [0x00007FF624D0ECA2]\nE       \t(No symbol) [0x00007FF624CFE16F]\nE       \tBaseThreadInitThunk [0x00007FFA8940257D+29]\nE       \tRtlUserThreadStart [0x00007FFA8AA2AF28+40]\n\n..\\..\\..\\PycharmProjects\\API_Testing_Practise\\pythonProject\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "80bb72f8-d75f-42f6-b3bd-904eb29683c1-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'input_question': 'Hi', 'type': 'unstructured'}"}], "start": 1720082302751, "stop": 1720082418836, "uuid": "e41fd1a2-4e9f-41b9-8821-299cd0fc70a6", "historyId": "7801b4d38d91a936ddf64b291c3bcaf2", "testCaseId": "2736d3b0ad48a98575ee7d13973c5285", "fullName": "testcases.test_discover#test_discover", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_discover"}, {"name": "host", "value": "LAPTOP-58GTJBDF"}, {"name": "thread", "value": "13896-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_discover"}]}